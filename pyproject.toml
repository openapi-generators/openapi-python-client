[project]
authors = [
    { name = "Dylan Anthony", email = "contact@dylananthony.com" },
]
license = { text = "MIT" }
requires-python = ">=3.8,<4.0"
dependencies = [
    "jinja2>=3.0.0,<4.0.0",
    "typer>0.6,<0.10",
    "colorama>=0.4.3; sys_platform == \"win32\"",
    "shellingham>=1.3.2,<2.0.0",
    "pydantic>=2.1.1,<3.0.0",
    "attrs>=21.3.0",
    "python-dateutil>=2.8.1,<3.0.0",
    "httpx>=0.20.0,<0.27.0",
    "PyYAML>=6.0,<7.0",
    "ruff>=0.1.2,<1.0.0",
    "typing-extensions>=4.8.0,<5.0.0",
]
name = "openapi-python-client"
version = "0.17.3"
description = "Generate modern Python clients from OpenAPI"
keywords = [
    "OpenAPI",
    "Client",
    "Generator",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Typing :: Typed",
]
readme = "README.md"

[project.urls]
repository = "https://github.com/openapi-generators/openapi-python-client"

[project.scripts]
openapi-python-client = "openapi_python_client.cli:app"

[tool.ruff]
select = ["E", "F", "I", "UP", "B", "PL", "RUF"]
line-length = 120
exclude = [
    ".git",
    ".mypy_cache",
    ".venv",
    "openapi_python_client/templates/*",
    "end_to_end_tests/*",
    "tests/test_templates/*",
]
ignore = ["E501", "PLR0913"]

[tool.ruff.per-file-ignores]
"openapi_python_client/cli.py" = ["B008"]

[tool.coverage.run]
omit = ["openapi_python_client/templates/*"]

[tool.mypy]
plugins = ["pydantic.mypy"]
disallow_any_generics = true
disallow_untyped_defs = true
warn_redundant_casts = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "importlib_metadata",
    "typer",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
junit_family = "xunit2"


[tool.pdm.dev-dependencies]
dev = [
    "pytest",
    "pytest-mock",
    "mypy",
    "taskipy",
    "safety",
    "pytest-cov",
    "python-multipart",
    "types-PyYAML<7.0.0,>=6.0.3",
    "types-certifi<2021.10.9,>=2020.0.0",
    "types-python-dateutil<3.0.0,>=2.0.0",
]

[tool.pdm.build]
includes = [
    "openapi_python_client",
    "CHANGELOG.md",
    "openapi_python_client/py.typed",
]

[tool.pdm.scripts]
lint = "ruff check --fix ."
format = "ruff format ."
safety_check = { shell = "pdm export -o requirements.txt && safety check -r requirements.txt --bare && rm requirements.txt" }
mypy = "mypy openapi_python_client"
check = { composite = ["lint", "format", "safety_check", "mypy", "test"] }
regen = {composite = ["regen_e2e", "regen_integration"]}
e2e = "pytest openapi_python_client end_to_end_tests/test_end_to_end.py"
re = {composite = ["regen_e2e", "e2e"]}
regen_e2e = "python -m end_to_end_tests.regen_golden_record"

[tool.pdm.scripts.test]
cmd = "pytest tests end_to_end_tests/test_end_to_end.py --basetemp=tests/tmp"
[tool.pdm.scripts.test.env]
"TEST_RELATIVE" = "true"

[tool.pdm.scripts.post_test]
cmd = "rm -r tests/tmp"

[tool.pdm.scripts.test_with_coverage]
composite = ["test --cov openapi_python_client tests --cov-report=term-missing"]

[tool.pdm.scripts.regen_integration]
shell = """
openapi-python-client update --url https://raw.githubusercontent.com/openapi-generators/openapi-test-server/main/openapi.json --config integration-tests/config.yaml --meta pdm \
"""

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = [
    "openapi_python_client",
]
exclude = [".gitignore"]
