<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="11" hostname="mac-0648-ehulburd.local" name="pytest" skipped="0" tests="162" time="2.674" timestamp="2020-11-02T17:36:55.039231"><testcase classname="tests.test___init__" name="test__get_project_for_url_or_path" time="0.005"><failure message="AssertionError: Expected call: Project(openapi=&lt;MagicMock id='4564476176'&gt;)&#10;Actual call: Project(custom_template_path=None, openapi=&lt;MagicMock id='4564476176'&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp...'4564476176'&gt;} == {'openapi': &lt;...'4564476176'&gt;}&#10;  Omitting 1 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='Project' id='4564528656'&gt;,)
kwargs = {'openapi': &lt;MagicMock id='4564476176'&gt;}, __tracebackhide__ = True
msg = "Expected call: Project(openapi=&lt;MagicMock id='4564476176'&gt;)\nActual call: Project(custom_template_path=None, openapi=... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='Project' id='4564528656'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'openapi': &lt;MagicMock id='4564476176'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4564476176'&gt;} == {'openapi': &lt;...'4564476176'&gt;}\n  Omitting 1 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='Project' id='4564528656'&gt;, args = (), kwargs = {'openapi': &lt;MagicMock id='4564476176'&gt;}, expected = ((), {'openapi': &lt;MagicMock id='4564476176'&gt;})
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x1101dfd40&gt;, actual = call(custom_template_path=None, openapi=&lt;MagicMock id='4564476176'&gt;)
cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: Project(openapi=&lt;MagicMock id='4564476176'&gt;)
E           Actual call: Project(custom_template_path=None, openapi=&lt;MagicMock id='4564476176'&gt;)

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='Project' id='4564528656'&gt;,)
kwargs = {'openapi': &lt;MagicMock id='4564476176'&gt;}, __tracebackhide__ = True
msg = "Expected call: Project(openapi=&lt;MagicMock id='4564476176'&gt;)\nActual call: Project(custom_template_path=None, openapi=... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='Project' id='4564528656'&gt;, args = (), kwargs = {'openapi': &lt;MagicMock id='4564476176'&gt;}, self = &lt;MagicMock name='Project' id='4564528656'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='Project' id='4564528656'&gt;,), kwargs = {'openapi': &lt;MagicMock id='4564476176'&gt;}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='Project' id='4564528656'&gt;,)
kwargs = {'openapi': &lt;MagicMock id='4564476176'&gt;}, __tracebackhide__ = True
msg = "Expected call: Project(openapi=&lt;MagicMock id='4564476176'&gt;)\nActual call: Project(custom_template_path=None, openapi=... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='Project' id='4564528656'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'openapi': &lt;MagicMock id='4564476176'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4564476176'&gt;} == {'openapi': &lt;...'4564476176'&gt;}\n  Omitting 1 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: Project(openapi=&lt;MagicMock id='4564476176'&gt;)
E           Actual call: Project(custom_template_path=None, openapi=&lt;MagicMock id='4564476176'&gt;)
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp...'4564476176'&gt;} == {'openapi': &lt;...'4564476176'&gt;}
E             Omitting 1 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

mocker = &lt;pytest_mock.plugin.MockerFixture object at 0x11016b690&gt;

    def test__get_project_for_url_or_path(mocker):
        data_dict = mocker.MagicMock()
        _get_document = mocker.patch("openapi_python_client._get_document", return_value=data_dict)
        openapi = mocker.MagicMock()
        from_dict = mocker.patch("openapi_python_client.parser.GeneratorData.from_dict", return_value=openapi)
        _Project = mocker.patch("openapi_python_client.Project")
        url = mocker.MagicMock()
        path = mocker.MagicMock()
    
        from openapi_python_client import _get_project_for_url_or_path
    
        project = _get_project_for_url_or_path(url=url, path=path)
    
        _get_document.assert_called_once_with(url=url, path=path)
        from_dict.assert_called_once_with(data_dict)
&gt;       _Project.assert_called_once_with(openapi=openapi)
E       AssertionError: Expected call: Project(openapi=&lt;MagicMock id='4564476176'&gt;)
E       Actual call: Project(custom_template_path=None, openapi=&lt;MagicMock id='4564476176'&gt;)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp...'4564476176'&gt;} == {'openapi': &lt;...'4564476176'&gt;}
E         Omitting 1 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test___init__.py:26: AssertionError</failure></testcase><testcase classname="tests.test___init__" name="test__get_project_for_url_or_path_generator_error" time="0.002" /><testcase classname="tests.test___init__" name="test__get_project_for_url_or_path_document_error" time="0.002" /><testcase classname="tests.test___init__" name="test_create_new_client" time="0.003"><failure message="AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)&#10;Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp...'4564322128'&gt;} == {'path': &lt;Mag...'4564322128'&gt;}&#10;  Omitting 2 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4564323728'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565441872'&gt;, 'url': &lt;MagicMock id='4564322128'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564323728'&gt;, actual_args = ()
actual_kwargs = {'custom_template_path': None, 'path': &lt;MagicMock id='4565441872'&gt;, 'url': &lt;MagicMock id='4564322128'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4564322128'&gt;} == {'path': &lt;Mag...'4564322128'&gt;}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564323728'&gt;, args = (), kwargs = {'path': &lt;MagicMock id='4565441872'&gt;, 'url': &lt;MagicMock id='4564322128'&gt;}
expected = ((), {'path': &lt;MagicMock id='4565441872'&gt;, 'url': &lt;MagicMock id='4564322128'&gt;})
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x1101230e0&gt;
actual = call(custom_template_path=None, path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;), cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)
E           Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4564323728'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565441872'&gt;, 'url': &lt;MagicMock id='4564322128'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564323728'&gt;, args = (), kwargs = {'path': &lt;MagicMock id='4565441872'&gt;, 'url': &lt;MagicMock id='4564322128'&gt;}
self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564323728'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4564323728'&gt;,), kwargs = {'path': &lt;MagicMock id='4565441872'&gt;, 'url': &lt;MagicMock id='4564322128'&gt;}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4564323728'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565441872'&gt;, 'url': &lt;MagicMock id='4564322128'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564323728'&gt;, actual_args = ()
actual_kwargs = {'custom_template_path': None, 'path': &lt;MagicMock id='4565441872'&gt;, 'url': &lt;MagicMock id='4564322128'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4564322128'&gt;} == {'path': &lt;Mag...'4564322128'&gt;}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)
E           Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp...'4564322128'&gt;} == {'path': &lt;Mag...'4564322128'&gt;}
E             Omitting 2 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

mocker = &lt;pytest_mock.plugin.MockerFixture object at 0x1103b0990&gt;

    def test_create_new_client(mocker):
        project = mocker.MagicMock()
        _get_project_for_url_or_path = mocker.patch(
            "openapi_python_client._get_project_for_url_or_path", return_value=project
        )
        url = mocker.MagicMock()
        path = mocker.MagicMock()
    
        from openapi_python_client import create_new_client
    
        result = create_new_client(url=url, path=path)
    
&gt;       _get_project_for_url_or_path.assert_called_once_with(url=url, path=path)
E       AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)
E       Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565441872'&gt;, url=&lt;MagicMock id='4564322128'&gt;)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp...'4564322128'&gt;} == {'path': &lt;Mag...'4564322128'&gt;}
E         Omitting 2 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test___init__.py:78: AssertionError</failure></testcase><testcase classname="tests.test___init__" name="test_create_new_client_project_error" time="0.003"><failure message="AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)&#10;Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp...'4565167376'&gt;} == {'path': &lt;Mag...'4565167376'&gt;}&#10;  Omitting 2 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4563822288'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565319376'&gt;, 'url': &lt;MagicMock id='4565167376'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4563822288'&gt;, actual_args = ()
actual_kwargs = {'custom_template_path': None, 'path': &lt;MagicMock id='4565319376'&gt;, 'url': &lt;MagicMock id='4565167376'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4565167376'&gt;} == {'path': &lt;Mag...'4565167376'&gt;}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4563822288'&gt;, args = (), kwargs = {'path': &lt;MagicMock id='4565319376'&gt;, 'url': &lt;MagicMock id='4565167376'&gt;}
expected = ((), {'path': &lt;MagicMock id='4565319376'&gt;, 'url': &lt;MagicMock id='4565167376'&gt;})
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x11031c050&gt;
actual = call(custom_template_path=None, path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;), cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)
E           Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4563822288'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565319376'&gt;, 'url': &lt;MagicMock id='4565167376'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4563822288'&gt;, args = (), kwargs = {'path': &lt;MagicMock id='4565319376'&gt;, 'url': &lt;MagicMock id='4565167376'&gt;}
self = &lt;MagicMock name='_get_project_for_url_or_path' id='4563822288'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4563822288'&gt;,), kwargs = {'path': &lt;MagicMock id='4565319376'&gt;, 'url': &lt;MagicMock id='4565167376'&gt;}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4563822288'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565319376'&gt;, 'url': &lt;MagicMock id='4565167376'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4563822288'&gt;, actual_args = ()
actual_kwargs = {'custom_template_path': None, 'path': &lt;MagicMock id='4565319376'&gt;, 'url': &lt;MagicMock id='4565167376'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4565167376'&gt;} == {'path': &lt;Mag...'4565167376'&gt;}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)
E           Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp...'4565167376'&gt;} == {'path': &lt;Mag...'4565167376'&gt;}
E             Omitting 2 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

mocker = &lt;pytest_mock.plugin.MockerFixture object at 0x110066310&gt;

    def test_create_new_client_project_error(mocker):
        error = GeneratorError()
        _get_project_for_url_or_path = mocker.patch(
            "openapi_python_client._get_project_for_url_or_path", return_value=error
        )
        url = mocker.MagicMock()
        path = mocker.MagicMock()
    
        from openapi_python_client import create_new_client
    
        result = create_new_client(url=url, path=path)
    
&gt;       _get_project_for_url_or_path.assert_called_once_with(url=url, path=path)
E       AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)
E       Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565319376'&gt;, url=&lt;MagicMock id='4565167376'&gt;)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp...'4565167376'&gt;} == {'path': &lt;Mag...'4565167376'&gt;}
E         Omitting 2 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test___init__.py:95: AssertionError</failure></testcase><testcase classname="tests.test___init__" name="test_update_existing_client" time="0.003"><failure message="AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)&#10;Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp...'4564703888'&gt;} == {'path': &lt;Mag...'4564703888'&gt;}&#10;  Omitting 2 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4564176528'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565619856'&gt;, 'url': &lt;MagicMock id='4564703888'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564176528'&gt;, actual_args = ()
actual_kwargs = {'custom_template_path': None, 'path': &lt;MagicMock id='4565619856'&gt;, 'url': &lt;MagicMock id='4564703888'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4564703888'&gt;} == {'path': &lt;Mag...'4564703888'&gt;}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564176528'&gt;, args = (), kwargs = {'path': &lt;MagicMock id='4565619856'&gt;, 'url': &lt;MagicMock id='4564703888'&gt;}
expected = ((), {'path': &lt;MagicMock id='4565619856'&gt;, 'url': &lt;MagicMock id='4564703888'&gt;})
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x11031cd40&gt;
actual = call(custom_template_path=None, path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;), cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)
E           Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4564176528'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565619856'&gt;, 'url': &lt;MagicMock id='4564703888'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564176528'&gt;, args = (), kwargs = {'path': &lt;MagicMock id='4565619856'&gt;, 'url': &lt;MagicMock id='4564703888'&gt;}
self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564176528'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4564176528'&gt;,), kwargs = {'path': &lt;MagicMock id='4565619856'&gt;, 'url': &lt;MagicMock id='4564703888'&gt;}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4564176528'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565619856'&gt;, 'url': &lt;MagicMock id='4564703888'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4564176528'&gt;, actual_args = ()
actual_kwargs = {'custom_template_path': None, 'path': &lt;MagicMock id='4565619856'&gt;, 'url': &lt;MagicMock id='4564703888'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4564703888'&gt;} == {'path': &lt;Mag...'4564703888'&gt;}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)
E           Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp...'4564703888'&gt;} == {'path': &lt;Mag...'4564703888'&gt;}
E             Omitting 2 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

mocker = &lt;pytest_mock.plugin.MockerFixture object at 0x11014e8d0&gt;

    def test_update_existing_client(mocker):
        project = mocker.MagicMock()
        _get_project_for_url_or_path = mocker.patch(
            "openapi_python_client._get_project_for_url_or_path", return_value=project
        )
        url = mocker.MagicMock()
        path = mocker.MagicMock()
    
        from openapi_python_client import update_existing_client
    
        result = update_existing_client(url=url, path=path)
    
&gt;       _get_project_for_url_or_path.assert_called_once_with(url=url, path=path)
E       AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)
E       Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565619856'&gt;, url=&lt;MagicMock id='4564703888'&gt;)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp...'4564703888'&gt;} == {'path': &lt;Mag...'4564703888'&gt;}
E         Omitting 2 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test___init__.py:111: AssertionError</failure></testcase><testcase classname="tests.test___init__" name="test_update_existing_client_project_error" time="0.003"><failure message="AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)&#10;Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp...'4565763600'&gt;} == {'path': &lt;Mag...'4565763600'&gt;}&#10;  Omitting 2 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4565765200'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565727504'&gt;, 'url': &lt;MagicMock id='4565763600'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4565765200'&gt;, actual_args = ()
actual_kwargs = {'custom_template_path': None, 'path': &lt;MagicMock id='4565727504'&gt;, 'url': &lt;MagicMock id='4565763600'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4565763600'&gt;} == {'path': &lt;Mag...'4565763600'&gt;}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4565765200'&gt;, args = (), kwargs = {'path': &lt;MagicMock id='4565727504'&gt;, 'url': &lt;MagicMock id='4565763600'&gt;}
expected = ((), {'path': &lt;MagicMock id='4565727504'&gt;, 'url': &lt;MagicMock id='4565763600'&gt;})
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x1101df8c0&gt;
actual = call(custom_template_path=None, path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;), cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)
E           Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4565765200'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565727504'&gt;, 'url': &lt;MagicMock id='4565763600'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4565765200'&gt;, args = (), kwargs = {'path': &lt;MagicMock id='4565727504'&gt;, 'url': &lt;MagicMock id='4565763600'&gt;}
self = &lt;MagicMock name='_get_project_for_url_or_path' id='4565765200'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4565765200'&gt;,), kwargs = {'path': &lt;MagicMock id='4565727504'&gt;, 'url': &lt;MagicMock id='4565763600'&gt;}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='_get_project_for_url_or_path' id='4565765200'&gt;,)
kwargs = {'path': &lt;MagicMock id='4565727504'&gt;, 'url': &lt;MagicMock id='4565763600'&gt;}, __tracebackhide__ = True
msg = "Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)\nActua... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='_get_project_for_url_or_path' id='4565765200'&gt;, actual_args = ()
actual_kwargs = {'custom_template_path': None, 'path': &lt;MagicMock id='4565727504'&gt;, 'url': &lt;MagicMock id='4565763600'&gt;}
introspection = "\nKwargs:\nassert {'custom_temp...'4565763600'&gt;} == {'path': &lt;Mag...'4565763600'&gt;}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)
E           Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp...'4565763600'&gt;} == {'path': &lt;Mag...'4565763600'&gt;}
E             Omitting 2 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

mocker = &lt;pytest_mock.plugin.MockerFixture object at 0x110240ed0&gt;

    def test_update_existing_client_project_error(mocker):
        error = GeneratorError()
        _get_project_for_url_or_path = mocker.patch(
            "openapi_python_client._get_project_for_url_or_path", return_value=error
        )
        url = mocker.MagicMock()
        path = mocker.MagicMock()
    
        from openapi_python_client import update_existing_client
    
        result = update_existing_client(url=url, path=path)
    
&gt;       _get_project_for_url_or_path.assert_called_once_with(url=url, path=path)
E       AssertionError: Expected call: _get_project_for_url_or_path(path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)
E       Actual call: _get_project_for_url_or_path(custom_template_path=None, path=&lt;MagicMock id='4565727504'&gt;, url=&lt;MagicMock id='4565763600'&gt;)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp...'4565763600'&gt;} == {'path': &lt;Mag...'4565763600'&gt;}
E         Omitting 2 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test___init__.py:128: AssertionError</failure></testcase><testcase classname="tests.test___init__.TestGetJson" name="test__get_document_no_url_or_path" time="0.002" /><testcase classname="tests.test___init__.TestGetJson" name="test__get_document_url_and_path" time="0.002" /><testcase classname="tests.test___init__.TestGetJson" name="test__get_document_bad_url" time="0.002" /><testcase classname="tests.test___init__.TestGetJson" name="test__get_document_url_no_path" time="0.002" /><testcase classname="tests.test___init__.TestGetJson" name="test__get_document_path_no_url" time="0.002" /><testcase classname="tests.test___init__.TestGetJson" name="test__get_document_bad_yaml" time="0.002" /><testcase classname="tests.test___init__.TestProject" name="test___init__" time="0.100" /><testcase classname="tests.test___init__.TestProject" name="test_project_and_package_name_overrides" time="0.001" /><testcase classname="tests.test___init__.TestProject" name="test_build" time="0.004" /><testcase classname="tests.test___init__.TestProject" name="test_build_file_exists" time="0.002" /><testcase classname="tests.test___init__.TestProject" name="test_update" time="0.004" /><testcase classname="tests.test___init__.TestProject" name="test_update_missing_dir" time="0.002" /><testcase classname="tests.test___init__.TestProject" name="test__build_metadata" time="0.021" /><testcase classname="tests.test___init__" name="test__reformat" time="0.003" /><testcase classname="tests.test___init__" name="test__get_errors" time="0.002" /><testcase classname="tests.test___init__" name="test__custom_templates" time="0.002"><failure message="AssertionError: assert False&#10; +  where False = isinstance(&lt;jinja2.loaders.FileSystemLoader object at 0x1101d3a50&gt;, &lt;class 'jinja2.loaders.ChoiceLoader'&gt;)&#10; +    where &lt;class 'jinja2.loaders.ChoiceLoader'&gt; = jinja2.ChoiceLoader">mocker = &lt;pytest_mock.plugin.MockerFixture object at 0x11013dd50&gt;

    def test__custom_templates(mocker):
        from openapi_python_client import GeneratorData, Project
        from openapi_python_client.parser.openapi import EndpointCollection, Schemas
    
        openapi = mocker.MagicMock(
            autospec=GeneratorData,
            title="My Test API",
            endpoint_collections_by_tag={
                "default": mocker.MagicMock(autospec=EndpointCollection, parse_errors=[1]),
                "other": mocker.MagicMock(autospec=EndpointCollection, parse_errors=[2]),
            },
            schemas=mocker.MagicMock(autospec=Schemas, errors=[3]),
        )
    
        project = Project(openapi=openapi)
        assert isinstance(project.env.loader, jinja2.PackageLoader)
    
        project = Project(openapi=openapi, custom_template_path='../end_to_end_tests/test_custom_templates')
        assert isinstance(project.env.loader, jinja2.ChoiceLoader)
        assert len(project.env.loader.loaders) == 2
&gt;       assert isinstance(project.env.loader.loaders[0], jinja2.ChoiceLoader)
E       AssertionError: assert False
E        +  where False = isinstance(&lt;jinja2.loaders.FileSystemLoader object at 0x1101d3a50&gt;, &lt;class 'jinja2.loaders.ChoiceLoader'&gt;)
E        +    where &lt;class 'jinja2.loaders.ChoiceLoader'&gt; = jinja2.ChoiceLoader

tests/test___init__.py:441: AssertionError</failure></testcase><testcase classname="tests.test___main__" name="test_main" time="0.003" /><testcase classname="tests.test_cli" name="test_version" time="0.003" /><testcase classname="tests.test_cli" name="test_config_arg" time="0.005"><failure message="AssertionError: Expected call: create_new_client(path=PosixPath('cool/path'), url=None)&#10;Actual call: create_new_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}&#10;  Omitting 2 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='create_new_client' id='4569005456'&gt;,)
kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True
msg = "Expected call: create_new_client(path=PosixPath('cool/path'), url=None)\nActual call: create_new_client(custom_templa... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='create_new_client' id='4569005456'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': PosixPath('cool/path'), 'url': None}
introspection = "\nKwargs:\nassert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='create_new_client' id='4569005456'&gt;, args = (), kwargs = {'path': PosixPath('cool/path'), 'url': None}
expected = ((), {'path': PosixPath('cool/path'), 'url': None}), _error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x11031c440&gt;
actual = call(custom_template_path=None, path=PosixPath('cool/path'), url=None), cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: create_new_client(path=PosixPath('cool/path'), url=None)
E           Actual call: create_new_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='create_new_client' id='4569005456'&gt;,)
kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True
msg = "Expected call: create_new_client(path=PosixPath('cool/path'), url=None)\nActual call: create_new_client(custom_templa... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='create_new_client' id='4569005456'&gt;, args = (), kwargs = {'path': PosixPath('cool/path'), 'url': None}
self = &lt;MagicMock name='create_new_client' id='4569005456'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='create_new_client' id='4569005456'&gt;,), kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='create_new_client' id='4569005456'&gt;,)
kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True
msg = "Expected call: create_new_client(path=PosixPath('cool/path'), url=None)\nActual call: create_new_client(custom_templa... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='create_new_client' id='4569005456'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': PosixPath('cool/path'), 'url': None}
introspection = "\nKwargs:\nassert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: create_new_client(path=PosixPath('cool/path'), url=None)
E           Actual call: create_new_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}
E             Omitting 2 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

mocker = &lt;pytest_mock.plugin.MockerFixture object at 0x110557ed0&gt;, _create_new_client = &lt;MagicMock name='create_new_client' id='4569005456'&gt;

    def test_config_arg(mocker, _create_new_client):
        load_config = mocker.patch("openapi_python_client.config.Config.load_from_path")
        from openapi_python_client.cli import app
    
        config_path = "config/path"
        path = "cool/path"
    
        result = runner.invoke(app, [f"--config={config_path}", "generate", f"--path={path}"], catch_exceptions=False)
    
        assert result.exit_code == 0
        load_config.assert_called_once_with(path=Path(config_path))
&gt;       _create_new_client.assert_called_once_with(url=None, path=Path(path))
E       AssertionError: Expected call: create_new_client(path=PosixPath('cool/path'), url=None)
E       Actual call: create_new_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}
E         Omitting 2 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test_cli.py:39: AssertionError</failure></testcase><testcase classname="tests.test_cli" name="test_bad_config" time="0.004" /><testcase classname="tests.test_cli.TestGenerate" name="test_generate_no_params" time="0.003" /><testcase classname="tests.test_cli.TestGenerate" name="test_generate_url_and_path" time="0.003" /><testcase classname="tests.test_cli.TestGenerate" name="test_generate_url" time="0.003"><failure message="AssertionError: Expected call: create_new_client(path=None, url='cool.url')&#10;Actual call: create_new_client(custom_template_path=None, path=None, url='cool.url')&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}&#10;  Omitting 2 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='create_new_client' id='4564703568'&gt;,)
kwargs = {'path': None, 'url': 'cool.url'}, __tracebackhide__ = True
msg = "Expected call: create_new_client(path=None, url='cool.url')\nActual call: create_new_client(custom_template_path=None... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='create_new_client' id='4564703568'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': None, 'url': 'cool.url'}
introspection = "\nKwargs:\nassert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='create_new_client' id='4564703568'&gt;, args = (), kwargs = {'path': None, 'url': 'cool.url'}, expected = ((), {'path': None, 'url': 'cool.url'})
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x1103e79e0&gt;, actual = call(custom_template_path=None, path=None, url='cool.url'), cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: create_new_client(path=None, url='cool.url')
E           Actual call: create_new_client(custom_template_path=None, path=None, url='cool.url')

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='create_new_client' id='4564703568'&gt;,)
kwargs = {'path': None, 'url': 'cool.url'}, __tracebackhide__ = True
msg = "Expected call: create_new_client(path=None, url='cool.url')\nActual call: create_new_client(custom_template_path=None... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='create_new_client' id='4564703568'&gt;, args = (), kwargs = {'path': None, 'url': 'cool.url'}, self = &lt;MagicMock name='create_new_client' id='4564703568'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='create_new_client' id='4564703568'&gt;,), kwargs = {'path': None, 'url': 'cool.url'}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='create_new_client' id='4564703568'&gt;,)
kwargs = {'path': None, 'url': 'cool.url'}, __tracebackhide__ = True
msg = "Expected call: create_new_client(path=None, url='cool.url')\nActual call: create_new_client(custom_template_path=None... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='create_new_client' id='4564703568'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': None, 'url': 'cool.url'}
introspection = "\nKwargs:\nassert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: create_new_client(path=None, url='cool.url')
E           Actual call: create_new_client(custom_template_path=None, path=None, url='cool.url')
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}
E             Omitting 2 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_cli.TestGenerate object at 0x1100e0cd0&gt;, _create_new_client = &lt;MagicMock name='create_new_client' id='4564703568'&gt;

    def test_generate_url(self, _create_new_client):
        url = "cool.url"
        from openapi_python_client.cli import app
    
        result = runner.invoke(app, ["generate", f"--url={url}"])
    
        assert result.exit_code == 0
&gt;       _create_new_client.assert_called_once_with(url=url, path=None)
E       AssertionError: Expected call: create_new_client(path=None, url='cool.url')
E       Actual call: create_new_client(custom_template_path=None, path=None, url='cool.url')
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}
E         Omitting 2 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test_cli.py:83: AssertionError</failure></testcase><testcase classname="tests.test_cli.TestGenerate" name="test_generate_path" time="0.003"><failure message="AssertionError: Expected call: create_new_client(path=PosixPath('cool/path'), url=None)&#10;Actual call: create_new_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}&#10;  Omitting 2 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='create_new_client' id='4567271312'&gt;,)
kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True
msg = "Expected call: create_new_client(path=PosixPath('cool/path'), url=None)\nActual call: create_new_client(custom_templa... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='create_new_client' id='4567271312'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': PosixPath('cool/path'), 'url': None}
introspection = "\nKwargs:\nassert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='create_new_client' id='4567271312'&gt;, args = (), kwargs = {'path': PosixPath('cool/path'), 'url': None}
expected = ((), {'path': PosixPath('cool/path'), 'url': None}), _error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x1103e7d40&gt;
actual = call(custom_template_path=None, path=PosixPath('cool/path'), url=None), cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: create_new_client(path=PosixPath('cool/path'), url=None)
E           Actual call: create_new_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='create_new_client' id='4567271312'&gt;,)
kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True
msg = "Expected call: create_new_client(path=PosixPath('cool/path'), url=None)\nActual call: create_new_client(custom_templa... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='create_new_client' id='4567271312'&gt;, args = (), kwargs = {'path': PosixPath('cool/path'), 'url': None}
self = &lt;MagicMock name='create_new_client' id='4567271312'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='create_new_client' id='4567271312'&gt;,), kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='create_new_client' id='4567271312'&gt;,)
kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True
msg = "Expected call: create_new_client(path=PosixPath('cool/path'), url=None)\nActual call: create_new_client(custom_templa... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='create_new_client' id='4567271312'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': PosixPath('cool/path'), 'url': None}
introspection = "\nKwargs:\nassert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: create_new_client(path=PosixPath('cool/path'), url=None)
E           Actual call: create_new_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}
E             Omitting 2 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_cli.TestGenerate object at 0x1103b06d0&gt;, _create_new_client = &lt;MagicMock name='create_new_client' id='4567271312'&gt;

    def test_generate_path(self, _create_new_client):
        path = "cool/path"
        from openapi_python_client.cli import app
    
        result = runner.invoke(app, ["generate", f"--path={path}"])
    
        assert result.exit_code == 0
&gt;       _create_new_client.assert_called_once_with(url=None, path=Path(path))
E       AssertionError: Expected call: create_new_client(path=PosixPath('cool/path'), url=None)
E       Actual call: create_new_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}
E         Omitting 2 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test_cli.py:92: AssertionError</failure></testcase><testcase classname="tests.test_cli.TestGenerate" name="test_generate_handle_errors" time="0.003" /><testcase classname="tests.test_cli.TestGenerate" name="test_generate_handle_multiple_warnings" time="0.004" /><testcase classname="tests.test_cli.TestUpdate" name="test_update_no_params" time="0.003" /><testcase classname="tests.test_cli.TestUpdate" name="test_update_url_and_path" time="0.003" /><testcase classname="tests.test_cli.TestUpdate" name="test_update_url" time="0.003"><failure message="AssertionError: Expected call: update_existing_client(path=None, url='cool.url')&#10;Actual call: update_existing_client(custom_template_path=None, path=None, url='cool.url')&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}&#10;  Omitting 2 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='update_existing_client' id='4564173584'&gt;,)
kwargs = {'path': None, 'url': 'cool.url'}, __tracebackhide__ = True
msg = "Expected call: update_existing_client(path=None, url='cool.url')\nActual call: update_existing_client(custom_template... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='update_existing_client' id='4564173584'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': None, 'url': 'cool.url'}
introspection = "\nKwargs:\nassert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='update_existing_client' id='4564173584'&gt;, args = (), kwargs = {'path': None, 'url': 'cool.url'}, expected = ((), {'path': None, 'url': 'cool.url'})
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x11048fd40&gt;, actual = call(custom_template_path=None, path=None, url='cool.url'), cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: update_existing_client(path=None, url='cool.url')
E           Actual call: update_existing_client(custom_template_path=None, path=None, url='cool.url')

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='update_existing_client' id='4564173584'&gt;,)
kwargs = {'path': None, 'url': 'cool.url'}, __tracebackhide__ = True
msg = "Expected call: update_existing_client(path=None, url='cool.url')\nActual call: update_existing_client(custom_template... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='update_existing_client' id='4564173584'&gt;, args = (), kwargs = {'path': None, 'url': 'cool.url'}
self = &lt;MagicMock name='update_existing_client' id='4564173584'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='update_existing_client' id='4564173584'&gt;,), kwargs = {'path': None, 'url': 'cool.url'}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='update_existing_client' id='4564173584'&gt;,)
kwargs = {'path': None, 'url': 'cool.url'}, __tracebackhide__ = True
msg = "Expected call: update_existing_client(path=None, url='cool.url')\nActual call: update_existing_client(custom_template... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='update_existing_client' id='4564173584'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': None, 'url': 'cool.url'}
introspection = "\nKwargs:\nassert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: update_existing_client(path=None, url='cool.url')
E           Actual call: update_existing_client(custom_template_path=None, path=None, url='cool.url')
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}
E             Omitting 2 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_cli.TestUpdate object at 0x1100bc2d0&gt;, _update_existing_client = &lt;MagicMock name='update_existing_client' id='4564173584'&gt;

    def test_update_url(self, _update_existing_client):
        url = "cool.url"
        from openapi_python_client.cli import app
    
        result = runner.invoke(app, ["update", f"--url={url}"])
    
        assert result.exit_code == 0
&gt;       _update_existing_client.assert_called_once_with(url=url, path=None)
E       AssertionError: Expected call: update_existing_client(path=None, url='cool.url')
E       Actual call: update_existing_client(custom_template_path=None, path=None, url='cool.url')
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp...': 'cool.url'} == {'path': None...': 'cool.url'}
E         Omitting 2 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test_cli.py:162: AssertionError</failure></testcase><testcase classname="tests.test_cli.TestUpdate" name="test_update_path" time="0.004"><failure message="AssertionError: Expected call: update_existing_client(path=PosixPath('cool/path'), url=None)&#10;Actual call: update_existing_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}&#10;  Omitting 2 identical items, use -vv to show&#10;  Left contains 1 more item:&#10;  {'custom_template_path': None}&#10;  Use -v to get the full diff">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='update_existing_client' id='4565442512'&gt;,)
kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True
msg = "Expected call: update_existing_client(path=PosixPath('cool/path'), url=None)\nActual call: update_existing_client(cus... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='update_existing_client' id='4565442512'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': PosixPath('cool/path'), 'url': None}
introspection = "\nKwargs:\nassert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='update_existing_client' id='4565442512'&gt;, args = (), kwargs = {'path': PosixPath('cool/path'), 'url': None}
expected = ((), {'path': PosixPath('cool/path'), 'url': None}), _error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x110251440&gt;
actual = call(custom_template_path=None, path=PosixPath('cool/path'), url=None), cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: update_existing_client(path=PosixPath('cool/path'), url=None)
E           Actual call: update_existing_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)

/opt/miniconda3/lib/python3.7/unittest/mock.py:834: AssertionError

During handling of the above exception, another exception occurred:

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once_with at 0x10e82f440&gt;, args = (&lt;MagicMock name='update_existing_client' id='4565442512'&gt;,)
kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True
msg = "Expected call: update_existing_client(path=PosixPath('cool/path'), url=None)\nActual call: update_existing_client(cus... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = &lt;MagicMock name='update_existing_client' id='4565442512'&gt;, args = (), kwargs = {'path': PosixPath('cool/path'), 'url': None}
self = &lt;MagicMock name='update_existing_client' id='4565442512'&gt;

    def assert_called_once_with(_mock_self, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        self = _mock_self
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times." %
                   (self._mock_name or 'mock', self.call_count))
            raise AssertionError(msg)
&gt;       return self.assert_called_with(*args, **kwargs)

/opt/miniconda3/lib/python3.7/unittest/mock.py:845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;MagicMock name='update_existing_client' id='4565442512'&gt;,), kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True

    def wrap_assert_called_with(*args: Any, **kwargs: Any) -&gt; None:
        __tracebackhide__ = True
&gt;       assert_wrapper(_mock_module_originals["assert_called_with"], *args, **kwargs)

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_with at 0x10e82f3b0&gt;, args = (&lt;MagicMock name='update_existing_client' id='4565442512'&gt;,)
kwargs = {'path': PosixPath('cool/path'), 'url': None}, __tracebackhide__ = True
msg = "Expected call: update_existing_client(path=PosixPath('cool/path'), url=None)\nActual call: update_existing_client(cus... items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
__mock_self = &lt;MagicMock name='update_existing_client' id='4565442512'&gt;, actual_args = (), actual_kwargs = {'custom_template_path': None, 'path': PosixPath('cool/path'), 'url': None}
introspection = "\nKwargs:\nassert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}\n  Omitting 2 identical items, use -vv to show\n  Left contains 1 more item:\n  {'custom_template_path': None}\n  Use -v to get the full diff"
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
            __wrapped_mock_method__(*args, **kwargs)
            return
        except AssertionError as e:
            if getattr(e, "_mock_introspection_applied", 0):
                msg = str(e)
            else:
                __mock_self = args[0]
                msg = str(e)
                if __mock_self.call_args is not None:
                    actual_args, actual_kwargs = __mock_self.call_args
                    introspection = ""
                    try:
                        assert actual_args == args[1:]
                    except AssertionError as e_args:
                        introspection += "\nArgs:\n" + str(e_args)
                    try:
                        assert actual_kwargs == kwargs
                    except AssertionError as e_kwargs:
                        introspection += "\nKwargs:\n" + str(e_kwargs)
                    if introspection:
                        msg += "\n\npytest introspection follows:\n" + introspection
            e = AssertionError(msg)
            e._mock_introspection_applied = True  # type:ignore[attr-defined]
&gt;           raise e
E           AssertionError: Expected call: update_existing_client(path=PosixPath('cool/path'), url=None)
E           Actual call: update_existing_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}
E             Omitting 2 identical items, use -vv to show
E             Left contains 1 more item:
E             {'custom_template_path': None}
E             Use -v to get the full diff

../../Library/Caches/pypoetry/virtualenvs/openapi-python-client-KTN6QUgq-py3.7/lib/python3.7/site-packages/pytest_mock/plugin.py:394: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_cli.TestUpdate object at 0x1101f1e50&gt;, _update_existing_client = &lt;MagicMock name='update_existing_client' id='4565442512'&gt;

    def test_update_path(self, _update_existing_client):
        path = "cool/path"
        from openapi_python_client.cli import app
    
        result = runner.invoke(app, ["update", f"--path={path}"])
    
        assert result.exit_code == 0
&gt;       _update_existing_client.assert_called_once_with(url=None, path=Path(path))
E       AssertionError: Expected call: update_existing_client(path=PosixPath('cool/path'), url=None)
E       Actual call: update_existing_client(custom_template_path=None, path=PosixPath('cool/path'), url=None)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'custom_temp..., 'url': None} == {'path': Posi..., 'url': None}
E         Omitting 2 identical items, use -vv to show
E         Left contains 1 more item:
E         {'custom_template_path': None}
E         Use -v to get the full diff

tests/test_cli.py:171: AssertionError</failure></testcase><testcase classname="tests.test_config" name="test_load_from_path" time="0.002" /><testcase classname="tests.test_config.TestLoadConfig" name="test_class_overrides" time="0.001" /><testcase classname="tests.test_config.TestLoadConfig" name="test_project_and_package_name_overrides" time="0.001" /><testcase classname="tests.test_config.TestLoadConfig" name="test_field_prefix" time="0.001" /><testcase classname="tests.test_utils" name="test_snake_case_uppercase_str" time="0.001" /><testcase classname="tests.test_utils" name="test_snake_case_from_pascal_with_acronyms" time="0.001" /><testcase classname="tests.test_utils" name="test_snake_case_from_pascal" time="0.001" /><testcase classname="tests.test_utils" name="test_snake_case_from_camel" time="0.001" /><testcase classname="tests.test_utils" name="test_kebab_case" time="0.001" /><testcase classname="tests.test_utils" name="test__sanitize" time="0.001" /><testcase classname="tests.test_utils" name="test_no_string_escapes" time="0.001" /><testcase classname="tests.test_utils" name="test__fix_keywords" time="0.001" /><testcase classname="tests.test_utils" name="test_to_valid_python_identifier" time="0.001" /><testcase classname="tests.test_openapi_parser.test_openapi.TestGeneratorData" name="test_from_dict" time="0.005" /><testcase classname="tests.test_openapi_parser.test_openapi.TestGeneratorData" name="test_from_dict_invalid_schema" time="0.001" /><testcase classname="tests.test_openapi_parser.test_openapi.TestModel" name="test_from_data" time="0.004" /><testcase classname="tests.test_openapi_parser.test_openapi.TestModel" name="test_from_data_property_parse_error" time="0.003" /><testcase classname="tests.test_openapi_parser.test_openapi.TestSchemas" name="test_build" time="0.003" /><testcase classname="tests.test_openapi_parser.test_openapi.TestSchemas" name="test_build_parse_error_on_reference" time="0.001" /><testcase classname="tests.test_openapi_parser.test_openapi.TestSchemas" name="test_build_enums" time="0.003" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_parse_request_form_body" time="0.002" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_parse_request_form_body_no_data" time="0.001" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_parse_multipart_body" time="0.001" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_parse_multipart_body_no_data" time="0.001" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_parse_request_json_body" time="0.002" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_parse_request_json_body_no_data" time="0.001" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_add_body_no_data" time="0.001" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_add_body_bad_data" time="0.002" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_add_body_happy" time="0.005" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test__add_responses_error" time="0.002" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test__add_responses" time="0.002" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test__add_parameters_handles_no_params" time="0.001" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test__add_parameters_parse_error" time="0.002" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test__add_parameters_fail_loudly_when_location_not_supported" time="0.002" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test__add_parameters_happy" time="0.004" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_from_data_bad_params" time="0.002" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_from_data_bad_responses" time="0.003" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_from_data_standard" time="0.003" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_from_data_no_operation_id" time="0.004" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpoint" name="test_from_data_no_security" time="0.003" /><testcase classname="tests.test_openapi_parser.test_openapi.TestImportStringFromReference" name="test_import_string_from_reference_no_prefix" time="0.002" /><testcase classname="tests.test_openapi_parser.test_openapi.TestImportStringFromReference" name="test_import_string_from_reference_with_prefix" time="0.003" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpointCollection" name="test_from_data" time="0.003" /><testcase classname="tests.test_openapi_parser.test_openapi.TestEndpointCollection" name="test_from_data_errors" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestProperty" name="test___post_init" time="0.003" /><testcase classname="tests.test_openapi_parser.test_properties.TestProperty" name="test_get_type_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestProperty" name="test_to_string" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestProperty" name="test_get_imports" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestStringProperty" name="test_get_type_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestStringProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestDateTimeProperty" name="test_get_imports" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestDateTimeProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestDateProperty" name="test_get_imports" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestDateProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestFileProperty" name="test_get_imports" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestFileProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestFloatProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestIntProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestBooleanProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestListProperty" name="test_get_type_string" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestListProperty" name="test_get_type_imports" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestListProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestUnionProperty" name="test_get_type_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestUnionProperty" name="test_get_type_imports" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestUnionProperty" name="test__validate_default" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestEnumProperty" name="test___post_init__" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestEnumProperty" name="test_get_type_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestEnumProperty" name="test_get_imports" time="0.020" /><testcase classname="tests.test_openapi_parser.test_properties.TestEnumProperty" name="test_values_from_list" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestEnumProperty" name="test_values_from_list_duplicate" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestEnumProperty" name="test_get_all_enums" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestEnumProperty" name="test_get_enum" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestEnumProperty" name="test__validate_default" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestRefProperty" name="test_template" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestRefProperty" name="test_get_type_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestRefProperty" name="test_get_imports" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestRefProperty" name="test__validate_default" time="0.003" /><testcase classname="tests.test_openapi_parser.test_properties.TestDictProperty" name="test_get_imports" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestDictProperty" name="test__validate_default" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_enum" time="0.004" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_ref" time="0.004" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_string" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_simple_types[number-FloatProperty]" time="0.003" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_simple_types[integer-IntProperty]" time="0.003" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_simple_types[boolean-BooleanProperty]" time="0.003" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_simple_types[object-DictProperty]" time="0.003" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_array" time="0.004" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_array_no_items" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_array_invalid_items" time="0.003" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_union" time="0.003" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_union_bad_type" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_unsupported_type" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_no_valid_props_in_data" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestPropertyFromData" name="test_property_from_data_validation_error" time="0.001" /><testcase classname="tests.test_openapi_parser.test_properties.TestStringBasedProperty" name="test__string_based_property_no_format" time="0.004" /><testcase classname="tests.test_openapi_parser.test_properties.TestStringBasedProperty" name="test__string_based_property_datetime_format" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestStringBasedProperty" name="test__string_based_property_date_format" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestStringBasedProperty" name="test__string_based_property_binary_format" time="0.002" /><testcase classname="tests.test_openapi_parser.test_properties.TestStringBasedProperty" name="test__string_based_property_unsupported_format" time="0.003" /><testcase classname="tests.test_openapi_parser.test_reference" name="test_from_ref" time="0.001" /><testcase classname="tests.test_openapi_parser.test_reference" name="test_from_ref_class_overrides" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponse" name="test_return_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponse" name="test_constructor" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestListRefResponse" name="test_return_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestListRefResponse" name="test_constructor" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestRefResponse" name="test_return_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestRefResponse" name="test_constructor" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestListBasicResponse" name="test_return_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestListBasicResponse" name="test_constructor" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestBasicResponse" name="test_return_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestBasicResponse" name="test_constructor" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestBytesResponse" name="test_return_string" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestBytesResponse" name="test_constructor" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_data_no_content" time="0.004" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_data_unsupported_content_type" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_data_ref" time="0.003" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_data_empty" time="0.002" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_data_no_response_type" time="0.002" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_data_array" time="0.002" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_basic_array" time="0.002" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_data_basic" time="0.002" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_dict_unsupported_type" time="0.001" /><testcase classname="tests.test_openapi_parser.test_responses.TestResponseFromData" name="test_response_from_data_octet_stream" time="0.002" /><testcase classname="tests.test_templates.test_endpoint_module" name="test_async_module" time="0.133" /></testsuite></testsuites>